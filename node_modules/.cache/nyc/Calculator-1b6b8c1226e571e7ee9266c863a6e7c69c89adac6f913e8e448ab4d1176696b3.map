{"version":3,"file":"C:\\Users\\Julian\\Desktop\\GitHub Repos\\calculadora\\src\\Calculator.ts","sources":["C:\\Users\\Julian\\Desktop\\GitHub Repos\\calculadora\\src\\Calculator.ts"],"names":[],"mappings":";;AAAA,sCAAiC;AAEjC;IAAA;IAiEE,CAAC;IA7DQ,gBAAK,GAAZ,UAAa,CAAS,EAAE,CAAS;QAC7B,IAAM,GAAG,GAAG,EAAE,CAAC;QAEjB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;YACxB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACd;QAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;YACxB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACd;QACD,eAAK,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QAC1B,OAAO,GAAG,CAAC,MAAM,CAAC;IACpB,CAAC;IAEM,gBAAK,GAAZ,UAAa,CAAS,EAAE,CAAS;QAC/B,IAAM,GAAG,GAAG,EAAE,CAAC;QAEf,IAAG,CAAC,GAAG,CAAC,EAAC;YAEP,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;gBACxB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACd;YAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;gBACxB,GAAG,CAAC,GAAG,EAAE,CAAC;aACX;YACD,eAAK,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;SAC3B;aAEG;YACF,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;gBACxB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACd;YAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;gBACxB,GAAG,CAAC,GAAG,EAAE,CAAC;aACX;YACD,eAAK,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,OAAO,GAAG,CAAC,MAAM,CAAC;SACnB;IACH,CAAC;IAEM,sBAAW,GAAlB,UAAmB,CAAS,EAAE,CAAS;QACnC,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;YACxB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;SACzB;QACD,eAAK,CAAC,MAAM,GAAG,GAAG,CAAC;IACvB,CAAC;IAEM,kBAAO,GAAd,UAAe,CAAS,EAAE,CAAS;QACjC,IAAI,GAAG,GAAC,CAAC,EAAC,IAAI,GAAC,CAAC,CAAC;QAEf,OAAM,GAAG,GAAG,CAAC,EAAC;YACZ,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC;YACxB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC,CAAC;SAC3B;QACD,eAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IA9DK,cAAG,GAAG,IAAI,CAAC;IA+DnB,iBAAC;CAAA,AAjEH,IAiEG;kBAjEkB,UAAU","sourcesContent":["import state from '../src/State';\r\n\r\nexport default class calculator {\r\n\r\n   static aux = null;\r\n\r\n    static Sumar(a: number, b: number){\r\n        const arr = [];\r\n\r\n      for(let i = 0; i < a; i++){\r\n        arr.push('');  \r\n      }\r\n\r\n      for(let i = 0; i < b; i++){\r\n        arr.push('');  \r\n      }\r\n      state.estado = arr.length;\r\n      return arr.length;\r\n    }\r\n\r\n    static Resta(a: number, b: number){\r\n      const arr = [];\r\n\r\n      if(a > b){\r\n\r\n        for(let i = 0; i < a; i++){\r\n          arr.push('');  \r\n        }\r\n  \r\n        for(let i = 0; i < b; i++){\r\n          arr.pop();  \r\n        }\r\n        state.estado = arr.length;\r\n      }\r\n\r\n      else{\r\n        for(let i = 0; i < b; i++){\r\n          arr.push('');  \r\n        }\r\n  \r\n        for(let i = 0; i < a; i++){\r\n          arr.pop();  \r\n        }\r\n        state.estado = arr.length;\r\n        return arr.length;\r\n      }\r\n    }\r\n\r\n    static Multiplicar(a: number, b: number){\r\n        let aux = 0;\r\n\r\n        for(let i = 0; i < a; i++){\r\n          aux = this.Sumar(b, aux)  \r\n        }\r\n        state.estado = aux;\r\n    }\r\n\r\n    static Dividir(a: number, b: number){\r\n      let aux=a,aux2=0;\r\n      \r\n        while(aux > 0){\r\n          aux = this.Resta(aux,b);\r\n          aux2 = this.Sumar(aux2,1);\r\n        }\r\n        state.estado = aux2;\r\n        return aux2;\r\n    }\r\n  }"]}